diff -uprN a/gui.c b/gui.c
--- a/gui.c	2025-01-22 12:58:25.448881216 +0800
+++ b/gui.c	2025-01-22 12:57:09.759742877 +0800
@@ -914,7 +914,7 @@ void load_controllers()
 	char config_path[512];
 	FILE* fp;
 	
-	snprintf(config_path, sizeof(config_path), "%s" PATH_SEPARATOR "%s", main_path, "controls.cfg");
+	snprintf(config_path, sizeof(config_path), "%s" PATH_SEPARATOR "%s", CONFIG_DIR, "controls.cfg");
 	fp = fopen(config_path, "rb");
 	if (fp)
 	{
@@ -929,7 +929,7 @@ void save_controllers()
 	char config_path[512];
 	FILE* fp;
 	
-	snprintf(config_path, sizeof(config_path), "%s" PATH_SEPARATOR "%s", main_path, "controls.cfg");
+	snprintf(config_path, sizeof(config_path), "%s" PATH_SEPARATOR "%s", CONFIG_DIR, "controls.cfg");
 	fp = fopen(config_path, "wb");
 	if (fp)
 	{
@@ -943,7 +943,7 @@ s32 load_config_file()
 {
   char config_path[512];
 
-  sprintf(config_path, "%s" PATH_SEPARATOR "%s", main_path, GPSP_CONFIG_FILENAME);
+  sprintf(config_path, "%s" PATH_SEPARATOR "%s", CONFIG_DIR, GPSP_CONFIG_FILENAME);
 
   file_open(config_file, config_path, read);
 
@@ -1050,7 +1050,7 @@ s32 save_config_file()
 {
   char config_path[512];
 
-  sprintf(config_path, "%s" PATH_SEPARATOR "%s", main_path, GPSP_CONFIG_FILENAME);
+  sprintf(config_path, "%s" PATH_SEPARATOR "%s", CONFIG_DIR, GPSP_CONFIG_FILENAME);
   
   file_open(config_file, config_path, write);
 
@@ -1158,7 +1158,7 @@ void get_savestate_filename_noshot(u32 s
   char savestate_ext[16];
 
   sprintf(savestate_ext, "%d.svs", slot);
-  make_rpath(name_buffer, 512, savestate_ext);
+  make_spath(name_buffer, 512, savestate_ext);
 }
 
 void get_savestate_filename(u32 slot, char *name_buffer)
diff -uprN a/gui.h b/gui.h
--- a/gui.h	2025-01-22 12:58:25.516878644 +0800
+++ b/gui.h	2025-01-22 12:57:09.695745297 +0800
@@ -21,6 +21,7 @@
 #define GUI_H
 
 #define GPSP_CONFIG_FILENAME "gpsp.cfg"
+#define CONFIG_DIR "/mnt/FunKey/.gpsp/cfg"
 
 s32 load_file(const char **wildcards, char *result);
 u32 adjust_frameskip(u32 button_id);
diff -uprN a/input.c b/input.c
--- a/input.c	2025-01-22 12:58:25.552877283 +0800
+++ b/input.c	2025-01-22 12:57:09.803741214 +0800
@@ -69,7 +69,7 @@ gui_action_type cursor_repeat = CURSOR_N
 
 
 #if defined(PC_BUILD) || defined(MIYOO)  
-u32 gamepad_config_map[12] =
+u32 gamepad_config_map[16] =
 {
   BUTTON_ID_UP,                 // Analog up
   BUTTON_ID_DOWN,               // Analog down
@@ -622,101 +622,45 @@ u32 key_map(SDLKey key_sym)
 
 extern u32 gamepad_config_line_to_button[];
 
-uint32_t tokey(uint32_t i)
-{
-	switch(gamepad_config_map[gamepad_config_line_to_button[i]])
-	{
-		// UP
-		case 0:
-			return BUTTON_UP;
-		break;
-		// LEFT
-		case 1:
-			return BUTTON_LEFT;
-		break;
-		// DOWN
-		case 2:
-			return BUTTON_DOWN;
-		break;
-		// RIGHT
-		case 3:
-			return BUTTON_RIGHT;
-		break;
-		// A
-		case 4:
-			return BUTTON_A;
-		break;
-		// B
-		case 5:
-			return BUTTON_B;
-		break;
-		// L
-		case 6:
-			return BUTTON_L;
-		break;
-		// R
-		case 7:
-			return BUTTON_R;
-		break;
-		// Start
-		case 8:
-			return BUTTON_START;
-		break;
-		// Select
-		case 9:
-			return BUTTON_SELECT;
-    case 10:
-      return BUTTON_SAVESTATE;
-    case 11:
-      return BUTTON_LOADSTATE;
-    case 12:
-      return BUTTON_AUTOFIRE_A;
-    case 13:
-      return BUTTON_AUTOFIRE_B;
-		break;
-	}
-	return 0;	
-}
-
-u32 key_map(u32 key_sym)
+u32 key_map(SDLKey key_sym)
 {
   switch(key_sym)
   {
-    case SDLK_UP:
-      return tokey(0);
-      
-    case SDLK_DOWN:
-      return tokey(1);
+    case SDLK_m:
+      return BUTTON_L;
 
-    case SDLK_LEFT:
-      return tokey(2);
+    case SDLK_n:
+      return BUTTON_R;
 
-    case SDLK_RIGHT:
-      return tokey(3);
-      
-    case SDLK_LALT:
-      return tokey(4);
-
-    case SDLK_LCTRL:
-      return tokey(5);
-      
-    case SDLK_LSHIFT:
-      return tokey(6);
-
-    case SDLK_SPACE:
-      return tokey(7);
-      
-    case SDLK_TAB:
-      return tokey(8);
+    case SDLK_d:
+      return BUTTON_DOWN;
 
-    case SDLK_BACKSPACE:
-      return tokey(9);
+    case SDLK_u:
+      return BUTTON_UP;
 
-    case SDLK_RETURN:
-      return tokey(10);
+    case SDLK_l:
+      return BUTTON_LEFT;
 
-    case SDLK_ESCAPE:
-      return tokey(11);
+    case SDLK_r:
+      return BUTTON_RIGHT;
+
+    case SDLK_s:
+      return BUTTON_START;
+
+    case SDLK_k:
+      return BUTTON_SELECT;
+
+    case SDLK_b:
+      return BUTTON_B;
+
+    case SDLK_a:
+      return BUTTON_A;
+
+    case SDLK_y:
+      return BUTTON_A;
+
+    case SDLK_x:
+      return BUTTON_B;
 
     default:
       return BUTTON_NONE;
@@ -771,29 +715,29 @@ gui_action_type get_gui_input()
       {
         switch(event.key.keysym.sym)
         {
-          case SDLK_DOWN:
+          case SDLK_d:
             gui_action = CURSOR_DOWN;
             break;
 
-          case SDLK_UP:
+          case SDLK_u:
             gui_action = CURSOR_UP;
             break;
 
-          case SDLK_LEFT:
+          case SDLK_l:
             gui_action = CURSOR_LEFT;
             break;
 
-          case SDLK_RIGHT:
+          case SDLK_r:
             gui_action = CURSOR_RIGHT;
             break;
 #ifdef MIYOO
           case SDLK_ESCAPE:
-          case SDLK_LCTRL:
+          case SDLK_b:
             gui_action = CURSOR_EXIT;
             break;
 
           case SDLK_RETURN:
-          case SDLK_LALT:
+          case SDLK_a:
             gui_action = CURSOR_SELECT;
             break;
 #else
@@ -918,7 +862,7 @@ u32 update_input()
           quit();
         }*/
 #if defined(PC_BUILD) || defined(MIYOO) 
-        if(event.key.keysym.sym == SDLK_RCTRL)
+        if(event.key.keysym.sym == SDLK_q)
 #else
         if(event.key.keysym.sym == SDLK_F10)
 #endif
diff -uprN a/main.c b/main.c
--- a/main.c	2025-01-22 12:58:25.624874561 +0800
+++ b/main.c	2025-01-22 12:57:09.839739852 +0800
@@ -272,7 +272,7 @@ int main(int argc, char *argv[])
 
   init_video();
 
-  sprintf(bios_filename, "%s" PATH_SEPARATOR "%s", main_path, "gba_bios.bin");
+  sprintf(bios_filename, "%s" PATH_SEPARATOR "%s", BIOS_DIR, "gba_bios.bin");
   ret = load_bios(bios_filename);
   if (ret != 0)
     ret = load_bios("gba_bios.bin");
@@ -1013,7 +1013,21 @@ void make_rpath(char *buff, size_t size,
   if (p == NULL)
     p = gamepak_filename;
 
-  snprintf(buff, size, "%s/%s", main_path, p);
+  snprintf(buff, size, "%s/%s", CFG_DIR, p);
+  p = strrchr(buff, '.');
+  if (p != NULL)
+    strcpy(p, ext);
+}
+
+// make path: <main_path>/<romname>.<ext>
+void make_spath(char *buff, size_t size, const char *ext)
+{
+  char *p;
+  p = strrchr(gamepak_filename, PATH_SEPARATOR_CHAR);
+  if (p == NULL)
+    p = gamepak_filename;
+
+  snprintf(buff, size, "%s/%s", STATES_DIR, p);
   p = strrchr(buff, '.');
   if (p != NULL)
     strcpy(p, ext);
diff -uprN a/main.h b/main.h
--- a/main.h	2025-01-22 12:58:25.640873957 +0800
+++ b/main.h	2025-01-22 12:57:09.839739852 +0800
@@ -20,6 +20,10 @@
 #ifndef MAIN_H
 #define MAIN_H
 
+#define BIOS_DIR "/mnt/FunKey/.gpsp/bios"
+#define CFG_DIR "/mnt/FunKey/.gpsp/cfg"
+#define STATES_DIR "/mnt/FunKey/.gpsp/states"
+
 typedef enum
 {
   TIMER_INACTIVE,
@@ -186,6 +190,7 @@ static u32 prescale_table[] = { 0, 6, 8,
 
 void change_ext(const char *src, char *buffer, const char *extension);
 void make_rpath(char *buff, size_t size, const char *ext);
+void make_spath(char *buff, size_t size, const char *ext);
 
 void set_clock_speed();
 
diff -uprN a/memory.c b/memory.c
--- a/memory.c	2025-01-22 12:58:25.652873503 +0800
+++ b/memory.c	2025-01-22 12:57:09.919736827 +0800
@@ -2192,7 +2192,7 @@ u32 load_gamepak(char *name)
     strncpy(gamepak_filename, name, sizeof(gamepak_filename));
     gamepak_filename[sizeof(gamepak_filename) - 1] = 0;
 
-    make_rpath(backup_filename, sizeof(backup_filename), ".sav");
+    make_spath(backup_filename, sizeof(backup_filename), ".sav");
     if (!load_backup(backup_filename))
     {
       // try path used by older versions
diff -uprN a/miyoo/Makefile b/miyoo/Makefile
--- a/miyoo/Makefile	2025-01-22 13:07:20.532650764 +0800
+++ b/miyoo/Makefile	2025-01-22 13:06:26.906678258 +0800
@@ -17,9 +17,9 @@ DESTDIR = emus
 SECTION = emulators
 ALIASES = aliases.txt
 
-CHAINPREFIX ?= /opt/miyoo
-CROSS_COMPILE ?= $(CHAINPREFIX)/usr/bin/arm-linux-
-
+CHAINPREFIX ?= /opt/FunKey-sdk-2.3.0
+CROSS_COMPILE ?= $(CHAINPREFIX)/usr/bin/arm-funkey-linux-gnueabihf-
+SYSROOT ?= $(CHAINPREFIX)/arm-funkey-linux-gnueabihf/sysroot
 CC = $(CROSS_COMPILE)gcc
 CXX = $(CROSS_COMPILE)g++
 STRIP = $(CROSS_COMPILE)strip
@@ -37,7 +37,7 @@ BIN       = $(TARGET)
 VPATH      += .. ../arm
 CFLAGS     = -Ofast -fdata-sections -ffunction-sections -fsingle-precision-constant -fno-PIC -flto
 CFLAGS     += -DARM_ARCH -DMIYOO -Wall
-CFLAGS     += -march=armv5te -mtune=arm926ej-s $(shell $(SYSROOT)/usr/bin/sdl-config --cflags)
+CFLAGS     += -march=armv7-a+neon-vfpv4 -mtune=cortex-a7 -mfpu=neon-vfpv4 $(shell $(SYSROOT)/usr/bin/sdl-config --cflags)
 PKG_LIBS   = $(shell $(SYSROOT)/../../usr/bin/pkg-config --libs sdl libpng zlib)
 LIBS       = -nodefaultlibs -lc -lgcc $(PKG_LIBS) -Wl,--as-needed -Wl,--gc-sections
 
