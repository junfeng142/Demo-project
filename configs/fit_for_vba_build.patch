diff -uprN c/Makefile.funkey d/Makefile.funkey
--- c/Makefile.funkey	2025-03-13 15:55:45.432836599 +0800
+++ d/Makefile.funkey	2025-03-13 15:55:27.105550594 +0800
@@ -1,6 +1,6 @@
 PRGNAME     = vbanext.elf
-CC          = /opt/funkey-toolchain/bin/arm-linux-gcc
-CXX 		= /opt/funkey-toolchain/bin/arm-linux-g++
+CC          = /opt/FunKey-sdk-2.3.0/bin/arm-funkey-linux-gnueabihf-gcc
+CXX 		= /opt/FunKey-sdk-2.3.0/bin/arm-funkey-linux-gnueabihf-g++
 #### Configuration
 
 # Possible values : retrostone, rs97, rs90
@@ -20,7 +20,7 @@ DEFINES		= -DLSB_FIRST -DINLINE="inline"
 DEFINES		+= -DGIT_VERSION=\"$(GIT_VERSION)\" 
 
 # Retrostone extra defines
-DEFINES		+= -DHAVE_NEON -DUSE_TWEAKS -DUSE_FRAME_SKIP
+DEFINES		+= -DHAVE_NEON -DUSE_TWEAKS -DUSE_FRAME_SKIP -DVIRTUAL_SURFACE
 
 CFLAGS		= -Ofast -fsingle-precision-constant -fno-PIC -flto -fno-common -Wall $(INCLUDES) $(DEFINES)
 ifeq ($(PROFILE), YES)
diff -uprN c/shell/input/sdl/input.cpp d/shell/input/sdl/input.cpp
--- c/shell/input/sdl/input.cpp	2025-03-13 15:56:56.178080693 +0800
+++ d/shell/input/sdl/input.cpp	2025-03-13 15:57:43.788226154 +0800
@@ -29,7 +29,7 @@ int32_t update_input(void)
 					case SDLK_LSHIFT:
 #endif
 					case SDLK_END:
-					case SDLK_RCTRL:
+					case SDLK_q:
 						emulator_state = 1;
 					break;
 					default:
diff -uprN c/shell/menu/menu.cpp d/shell/menu/menu.cpp
--- c/shell/menu/menu.cpp	2025-03-13 16:00:03.814772447 +0800
+++ d/shell/menu/menu.cpp	2025-03-13 16:00:21.194096366 +0800
@@ -76,18 +76,18 @@ static void config_load()
 	else
 	{
 		/* Default mapping for Horizontal */
-		option.config_buttons[0] = SDLK_UP;
-		option.config_buttons[1] = SDLK_DOWN;
-		option.config_buttons[2] = SDLK_LEFT;
-		option.config_buttons[3] = SDLK_RIGHT;
-		
-		option.config_buttons[4] = SDLK_LCTRL;
-		option.config_buttons[5] = SDLK_LALT;
-		option.config_buttons[6] = SDLK_TAB;
-		option.config_buttons[7] = SDLK_BACKSPACE;
+		option.config_buttons[0] = SDLK_u;
+		option.config_buttons[1] = SDLK_d;
+		option.config_buttons[2] = SDLK_l;
+		option.config_buttons[3] = SDLK_r;
+		
+		option.config_buttons[4] = SDLK_a;
+		option.config_buttons[5] = SDLK_b;
+		option.config_buttons[6] = SDLK_m;
+		option.config_buttons[7] = SDLK_n;
 		
-		option.config_buttons[8] = SDLK_RETURN;
-		option.config_buttons[9] = SDLK_ESCAPE;
+		option.config_buttons[8] = SDLK_s;
+		option.config_buttons[9] = SDLK_k;
 				
 		option.config_buttons[10] = 306;
 		option.config_buttons[11] = 308;
@@ -213,7 +213,7 @@ static void Input_Remapping()
             {
                 switch(Event.key.keysym.sym)
                 {
-                    case SDLK_UP:
+                    case SDLK_u:
                         currentselection--;
                         if (currentselection < 1)
                         {
@@ -221,33 +221,33 @@ static void Input_Remapping()
 							else currentselection = 9;
 						}
                         break;
-                    case SDLK_DOWN:
+                    case SDLK_d:
                         currentselection++;
                         if (currentselection == 10)
                         {
 							currentselection = 1;
 						}
                         break;
-                    case SDLK_LCTRL:
-                    case SDLK_RETURN:
+                    case SDLK_a:
+                    case SDLK_s:
                         pressed = 1;
 					break;
-                    case SDLK_ESCAPE:
+                    case SDLK_k:
                         option.config_buttons[currentselection - 1] = 0;
 					break;
-                    case SDLK_LALT:
+                    case SDLK_b:
                         exit_input = 1;
 					break;
-                    case SDLK_LEFT:
+                    case SDLK_l:
 						if (currentselection > 9) currentselection -= 9;
 					break;
-                    case SDLK_RIGHT:
+                    case SDLK_r:
 						if (currentselection < 10) currentselection += 9;
 					break;
-                    case SDLK_BACKSPACE:
+                    case SDLK_n:
 						controls_chosen = 1;
 					break;
-                    case SDLK_TAB:
+                    case SDLK_m:
 						controls_chosen = 0;
 					break;
 					default:
@@ -271,7 +271,7 @@ static void Input_Remapping()
 						{
 							if (Event.type == SDL_KEYDOWN)
 							{
-								if (Event.key.keysym.sym != SDLK_RCTRL)
+								if (Event.key.keysym.sym != SDLK_q)
 								{
 									option.config_buttons[currentselection - 1] = Event.key.keysym.sym;
 									exit_map = 1;
@@ -433,27 +433,27 @@ void Menu()
             {
                 switch(Event.key.keysym.sym)
                 {
-                    case SDLK_UP:
+                    case SDLK_u:
                         currentselection--;
                         if (currentselection == 0)
                             currentselection = EXIT_NUMBER;
                         break;
-                    case SDLK_DOWN:
+                    case SDLK_d:
                         currentselection++;
                         if (currentselection == EXIT_NUMBER+1)
                             currentselection = 1;
                         break;
                     case SDLK_END:
-                    case SDLK_RCTRL:
-                    case SDLK_LALT:
+                    case SDLK_q:
+                    case SDLK_b:
 						pressed = 1;
 						currentselection = 1;
 						break;
-                    case SDLK_LCTRL:
-                    case SDLK_RETURN:
+                    case SDLK_a:
+                    case SDLK_s:
                         pressed = 1;
                         break;
-                    case SDLK_LEFT:
+                    case SDLK_l:
                         switch(currentselection)
                         {
                             case 2:
@@ -476,7 +476,7 @@ void Menu()
 							#endif
                         }
                         break;
-                    case SDLK_RIGHT:
+                    case SDLK_r:
                         switch(currentselection)
                         {
                             case 2:
diff -uprN c/shell/video/funkey/video_blit.cpp d/shell/video/funkey/video_blit.cpp
--- c/shell/video/funkey/video_blit.cpp	2025-03-13 16:11:44.099626611 +0800
+++ d/shell/video/funkey/video_blit.cpp	2025-03-13 16:12:34.261683113 +0800
@@ -30,54 +30,73 @@
 #include "config.h"
 #include "globals.h"
 
-SDL_Surface *sdl_screen, *backbuffer, *gba_screen;
+#ifdef ENABLE_JOYSTICKCODE
+static SDL_Joystick *sdl_joy;
+#endif
+
 #ifndef SDL_TRIPLEBUF
-#warning "Triple buffering not available : Reverting back to Double buffering"
 #define SDL_TRIPLEBUF SDL_DOUBLEBUF
 #endif
 
-static SDL_Rect rc = {0, 20, 240, 200};
+#ifndef VIRTUAL_SURFACE
+#error "VIRTUAL_SURFACE needs to be defined. Redo the compilation"
+#endif
+
+SDL_Surface *sdl_screen, *backbuffer;
 
-#define FLAGS_SDL SDL_HWSURFACE | SDL_DOUBLEBUF
+uint32_t width_of_surface;
 
 void Init_Video()
 {
+	#ifdef ENABLE_JOYSTICKCODE
+	SDL_Init(SDL_INIT_VIDEO | SDL_INIT_JOYSTICK);
+	
+	if (SDL_NumJoysticks() > 0)
+	{
+		sdl_joy = SDL_JoystickOpen(0);
+		SDL_JoystickEventState(SDL_ENABLE);
+	}
+	#else
 	SDL_Init(SDL_INIT_VIDEO);
+	#endif
 	
-	if (sdl_screen && SDL_MUSTLOCK(sdl_screen)) SDL_UnlockSurface(sdl_screen);
 	SDL_ShowCursor(0);
-	sdl_screen = SDL_SetVideoMode(240, 240, 16, FLAGS_SDL);
-	backbuffer = SDL_CreateRGBSurface(SDL_SWSURFACE, 320, 240, 16, 0,0,0,0);
-	gba_screen = SDL_CreateRGBSurface(SDL_SWSURFACE, 240, 160, 16, 0,0,0,0);
-	if (SDL_MUSTLOCK(sdl_screen)) SDL_LockSurface(sdl_screen);
+	
+	sdl_screen = SDL_SetVideoMode(HOST_WIDTH_RESOLUTION, HOST_HEIGHT_RESOLUTION, 16, SDL_HWSURFACE
+#ifdef SDL_TRIPLEBUF
+	| SDL_TRIPLEBUF
+#endif
+	);
+	
+	backbuffer = SDL_CreateRGBSurface(SDL_SWSURFACE, HOST_WIDTH_RESOLUTION, HOST_HEIGHT_RESOLUTION, 16, 0,0,0,0);
+	
 	Set_Video_InGame();
 }
 
 void Set_Video_Menu()
 {
+	if (sdl_screen->w != HOST_WIDTH_RESOLUTION)
+	{
+		//memcpy(pix, sdl_screen->pixels, (INTERNAL_GBA_WIDTH * INTERNAL_GBA_HEIGHT)*2);
+		sdl_screen = SDL_SetVideoMode(HOST_WIDTH_RESOLUTION, HOST_HEIGHT_RESOLUTION, 16, SDL_HWSURFACE);
+	}
 }
 
 void Set_Video_InGame()
 {
 	switch(option.fullscreen) 
 	{
-		// Fullscreen
-		case 0:
-		case 1:
-			pix = (uint16_t*) gba_screen->pixels;	
-		break;
-		default:
-			pix = (uint16_t*) sdl_screen->pixels + ((20*240)*2);	
-		break;
-	}
+        default:
+			if (sdl_screen->w != HOST_WIDTH_RESOLUTION) sdl_screen = SDL_SetVideoMode(HOST_WIDTH_RESOLUTION, HOST_HEIGHT_RESOLUTION, 16, SDL_HWSURFACE);
+			width_of_surface = INTERNAL_GBA_WIDTH;
+        break;
+    }
 }
 
 void Clean_Video()
 {
 	for(uint_fast8_t i=0;i<3;i++)
 	{
-		SDL_FillRect(gba_screen, NULL, 0);
-		SDL_FillRect(backbuffer, NULL, 0);
 		SDL_FillRect(sdl_screen, NULL, 0);
 		SDL_Flip(sdl_screen);
 	}	
@@ -85,44 +104,59 @@ void Clean_Video()
 
 void Close_Video()
 {
-	if (sdl_screen)
-	{
-		SDL_FreeSurface(sdl_screen);
-		sdl_screen = NULL;
-	}
-	if (backbuffer)
-	{
-		SDL_FreeSurface(backbuffer);
-		backbuffer = NULL;
-	}
-	if (gba_screen)
-	{
-		SDL_FreeSurface(gba_screen);
-		gba_screen = NULL;
-	}
+	#ifdef ENABLE_JOYSTICKCODE
+	if (SDL_JoystickOpened(0)) SDL_JoystickClose(sdl_joy);
+	#endif
+	if (sdl_screen) SDL_FreeSurface(sdl_screen);
+	if (backbuffer) SDL_FreeSurface(backbuffer);
 	SDL_Quit();
 }
 
-
 void Update_Video_Menu()
 {
 	SDL_SoftStretch(backbuffer, NULL, sdl_screen, NULL);
 	SDL_Flip(sdl_screen);
 }
 
+
 void Update_Video_Ingame(void)
 {
+	uint_fast16_t y, pitch;
+	uint32_t internal_width, internal_height;
+	uint16_t *source_graph, *src, *dst;
+
+	internal_width = INTERNAL_GBA_WIDTH;
+	internal_height = INTERNAL_GBA_HEIGHT;
+	source_graph = (uint16_t* __restrict__)pix;
+	
+	SDL_LockSurface(sdl_screen);
+	
 	switch(option.fullscreen) 
 	{
 		// Fullscreen
 		case 0:
-			upscale_160x240_to_240x240_bilinearish((uint16_t* __restrict__)gba_screen->pixels, (uint16_t* __restrict__)sdl_screen->pixels);
+			gba_upscale((uint16_t __restrict__*)sdl_screen->pixels, (uint16_t __restrict__*)source_graph, 240, 160, PIX_BUFFER_SCREEN_WIDTH*2, sdl_screen->pitch);
 		break;
 		case 1:
-			SDL_SoftStretch(gba_screen, NULL, sdl_screen, &rc);
+			gba_upscale_aspect((uint16_t __restrict__*)sdl_screen->pixels + (480*8), (uint16_t __restrict__*)source_graph, 240, 160, PIX_BUFFER_SCREEN_WIDTH*2, sdl_screen->pitch);
+		break;
+		case 2:
+			pitch = HOST_WIDTH_RESOLUTION;
+			src = (uint16_t* __restrict__)source_graph;
+			dst = (uint16_t* __restrict__)sdl_screen->pixels
+				+ ((HOST_WIDTH_RESOLUTION - internal_width) / 4) * sizeof(uint16_t)
+				+ ((HOST_HEIGHT_RESOLUTION - internal_height) / 2) * pitch;
+			for (y = 0; y < internal_height; y++)
+			{
+				memmove(dst, src, internal_width * sizeof(uint16_t));
+				src += PIX_BUFFER_SCREEN_WIDTH;
+				dst += pitch;
+			}
 		break;
-		default:
+		// Hqx
+		case 3:
 		break;
 	}
-	SDL_Flip(sdl_screen);	
+	SDL_UnlockSurface(sdl_screen);	
+	SDL_Flip(sdl_screen);
 }
diff -uprN c/shell/video/funkey/video_blit.h d/shell/video/funkey/video_blit.h
--- c/shell/video/funkey/video_blit.h	2025-03-13 16:22:51.693769191 +0800
+++ d/shell/video/funkey/video_blit.h	2025-03-13 16:11:44.099626611 +0800
@@ -3,7 +3,7 @@
 
 #include <SDL/SDL.h>
 
-#define HOST_WIDTH_RESOLUTION 240
+#define HOST_WIDTH_RESOLUTION 320
 #define HOST_HEIGHT_RESOLUTION 240
 
 #define MENU_WIDTH_RESOLUTION 320
